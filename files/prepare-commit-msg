#!/usr/bin/env python
# vim: set syntax=python:
ask_for_type = False
ask_for_type = True
""" Git hook to insert a commit message marker.

This hook is specific to the Psignifit-3.x project. It will insert an
appropriate commit message marker, e.g. [C++/NF] into the first line of the
commit message.

Author:  Valentin Haenel <valentin.haenel@gmx.de>
Licence: WTFPL http://en.wikipedia.org/wiki/WTFPL

Usage: symlink the file to a .git/hooks directory
$ git clone git://github.com/esc/commit-marker
$ cd ${project}
$ ln -s ${path-to}/commit-prefix/prepare-commit-msg .git/hooks

When committing, the script will interactively ask you for input using the
prompt '?:'. You may then input one or more numbers, separated by space. The
script will parse you input and construct the desired commit marker.

For example:

$ git co -b testing
$ git commit -m "commit message"
Where did you make your change?
1: C++    -- C++ code base
2: swig   -- swig interface
3: py     -- Python code
4: R      -- R code
5: matlab -- matlab code
6: build  -- Build system
7: docs   -- Documentation
8: debian -- Debian directory
?:3
What kind of modification did you make?
1: NF  -- new feature
2: BF  -- bug fix
3: RF  -- refactor
4: FO  -- formatting
5: DOC -- documentation
?:3 4
[testing da33f2f] [py/RF/FO] commit message
$ git log -1 --pretty="format:%s"
[py/RF/FO] commit message

Although the example works with the '-m' flag for simplicity, the script also
works when 'git commit' opens the editor of you choice. In this case the commit
marker will already have been inserted and you must only write the message. This
also gives you the chance to amend or modify the marker to you liking.  If you
don't enter a number, the script will simply insert the empty string.

If you wish to abort the commit when you have reached the editor, you have to
delete the commit message marker and save an empty commit message. Vim users
could use ':cq' to exit with a non-zero status, which will also abort the
commit.

"""

import sys

import commands
import subprocess
import os
import re
# cwd = os.path.dirname( '/ext/home/rakesh.kumar/workspace/myproject/' )
pr = subprocess.Popen( "git symbolic-ref HEAD 2>/dev/null" , cwd = os.getcwd(), shell = True, stdout = subprocess.PIPE, stderr = subprocess.PIPE )
(out, error) = pr.communicate()


# print "Error : " + str(error)
# git symbolic-ref HEAD 2>/dev/null
# refs/heads/T-30927-time-update
# print "out : " + str(out)

branch = str(out)
ticket = ""
if len(branch):
    branch = branch.rstrip()
    branch = branch[branch.rfind("/")+1:]
    REG = r"^\w+-([\d]+)-.+"
    if re.match(REG, branch):
        ticket = re.sub(REG, r"\1", branch )

mod_type = [('NF ', 'new feature'),
            ('BF ', 'bug fix'),
            ('RF ', 'refactor'),
            ('CH ', 'changes'),
            ('FO ', 'formatting'),
            ('UT ', 'unit test'),
           ]

mod_type = dict( (str(index+1), option)
        for index, option in enumerate(mod_type))

area_type = [('PHP         ', 'pure PHP'),
             ('SQL         ', 'SQL'),
             ('JS          ', 'web development JS'),
             ('angular     ', 'angular JS and HTML'),
             ('HTML        ', 'web development HTML'),
             ('CSS         ', 'web development CSS'),
             ('py          ', 'Python code'),
             # ('C++         ', 'C++ code base'),
             ('docs        ', 'Documentation'),
             # ('R           ', 'R code'),
             # ('matlab      ', 'matlab code'),
             # ('build       ', 'Build system'),
             # ('debian      ',  'Debian directory'),
            ]

area_type = dict( (str(index+1), option)
        for index, option in enumerate(area_type))

def print_and_read_selection(option_dict):
    for key, val in sorted(option_dict.items()):
        print '%s: %s -- %s' % (key, val[0], val[1])
    # needed to run raw_input in git-hook
    sys.stdin = open('/dev/tty')
    try:
        user_input = raw_input('?:')
    except KeyboardInterrupt:
        print "Canceled by user!"
        sys.exit(1)
    if not user_input:
        return ''
    tokenized_input = user_input.strip().split(' ')
    try:
        descriptors = [option_dict[i][0].rstrip()
                for i in tokenized_input]
    except KeyError:
        print 'Fatal: number %s is invalid' % i
        sys.exit(1)
    else:
        return '/'.join(descriptors)

def get_marker_from_user():
    output_list = []
    if ticket:
        output_list.insert(0,'#'+ticket+' ')
    if ask_for_type:
        changesArr = []
        print 'Where did you make your change?'
        workType  = print_and_read_selection(area_type)
        if workType:
            changesArr.append(workType)
        print 'What kind of modification did you make?'
        technology = print_and_read_selection(mod_type)
        if technology:
            changesArr.append(technology)
        if len(changesArr):
            output_list.append('[')
            output_list.append(', '.join(changesArr))
            output_list.append('] ')
    return ''.join(output_list)

def prepend_to_file(marker):
    f = open(sys.argv[1], 'r')
    lines = f.readlines()
    lines[0] = marker + lines[0]
    f.close()
    f = open(sys.argv[1], 'w')
    f.write(''.join(lines))
    f.close()

if __name__ == '__main__':
    prepend_to_file(get_marker_from_user())
